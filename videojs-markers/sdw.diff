diff --git a/dist/videojs-markers.js b/dist/videojs-markers.js
index 01adc14..e54f098 100644
--- a/dist/videojs-markers.js
+++ b/dist/videojs-markers.js
@@ -1,4 +1,4 @@
-(function (global, factory) {
+(function(global, factory) {
   if (typeof define === "function" && define.amd) {
     define(['video.js'], factory);
   } else if (typeof exports !== "undefined") {
@@ -10,9 +10,9 @@
     factory(global.videojs);
     global.videojsMarkers = mod.exports;
   }
-})(this, function (_video) {
+})(this, function(_video) {
   /*! videojs-markers - v0.7.0 - 2017-06-06
-  * Copyright (c) 2017 ; Licensed  */
+   * Copyright (c) 2017 ; Licensed  */
   'use strict';
 
   var _video2 = _interopRequireDefault(_video);
@@ -23,10 +23,11 @@
     };
   }
 
-  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
+  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
     return typeof obj;
-  } : function (obj) {
-    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
+  } : function(obj) {
+    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" :
+      typeof obj;
   };
 
   // default setting
@@ -67,7 +68,7 @@
   // create a non-colliding random number
   function generateUUID() {
     var d = new Date().getTime();
-    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
+    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
       var r = (d + Math.random() * 16) % 16 | 0;
       d = Math.floor(d / 16);
       return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);
@@ -82,18 +83,19 @@
     // videojs 4 doens't support it by defualt.
     if (!_video2.default.mergeOptions) {
       var isPlain = function isPlain(value) {
-        return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && toString.call(value) === '[object Object]' && value.constructor === Object;
+        return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && toString.call(
+          value) === '[object Object]' && value.constructor === Object;
       };
 
       var mergeOptions = function mergeOptions(source1, source2) {
 
         var result = {};
         var sources = [source1, source2];
-        sources.forEach(function (source) {
+        sources.forEach(function(source) {
           if (!source) {
             return;
           }
-          Object.keys(source).forEach(function (key) {
+          Object.keys(source).forEach(function(key) {
             var value = source[key];
             if (!isPlain(value)) {
               result[key] = value;
@@ -112,10 +114,10 @@
     }
 
     if (!_video2.default.createEl) {
-      _video2.default.createEl = function (tagName, props, attrs) {
+      _video2.default.createEl = function(tagName, props, attrs) {
         var el = _video2.default.Player.prototype.createEl(tagName, props);
         if (!!attrs) {
-          Object.keys(attrs).forEach(function (key) {
+          Object.keys(attrs).forEach(function(key) {
             el.setAttribute(key, attrs[key]);
           });
         }
@@ -127,24 +129,24 @@
      * register the markers plugin (dependent on jquery)
      */
     var setting = _video2.default.mergeOptions(defaultSetting, options),
-        markersMap = {},
-        markersList = [],
-        // list of markers sorted by time
-    currentMarkerIndex = NULL_INDEX,
-        player = this,
-        markerTip = null,
-        breakOverlay = null,
-        overlayIndex = NULL_INDEX;
+      markersMap = {},
+      markersList = [],
+      // list of markers sorted by time
+      currentMarkerIndex = NULL_INDEX,
+      player = this,
+      markerTip = null,
+      breakOverlay = null,
+      overlayIndex = NULL_INDEX;
 
     function sortMarkersList() {
       // sort the list by time in asc order
-      markersList.sort(function (a, b) {
+      markersList.sort(function(a, b) {
         return setting.markerTip.time(a) - setting.markerTip.time(b);
       });
     }
 
     function addMarkers(newMarkers) {
-      newMarkers.forEach(function (marker) {
+      newMarkers.forEach(function(marker) {
         marker.key = generateUUID();
 
         player.el().querySelector('.vjs-progress-holder').appendChild(createMarkerDiv(marker));
@@ -169,14 +171,14 @@
         'data-marker-time': setting.markerTip.time(marker)
       });
 
-      Object.keys(setting.markerStyle).forEach(function (key) {
+      Object.keys(setting.markerStyle).forEach(function(key) {
         markerDiv.style[key] = setting.markerStyle[key];
       });
       markerDiv.style.left = getPosition(marker) + '%';
       markerDiv.style.marginLeft = markerDiv.getBoundingClientRect().width / 2 + 'px';
 
       // bind click event to seek to marker time
-      markerDiv.addEventListener('click', function (e) {
+      markerDiv.addEventListener('click', function(e) {
         var preventDefault = false;
         if (typeof setting.onMarkerClick === "function") {
           // if return false, prevent default behavior
@@ -198,7 +200,7 @@
 
     function updateMarkers() {
       // update UI for markers whose time changed
-      markersList.forEach(function (marker) {
+      markersList.forEach(function(marker) {
         var markerDiv = player.el().querySelector(".vjs-marker[data-marker-key='" + marker.key + "']");
         var markerTime = setting.markerTip.time(marker);
 
@@ -219,7 +221,7 @@
       currentMarkerIndex = NULL_INDEX;
 
       var deleteIndexList = [];
-      indexArray.forEach(function (index) {
+      indexArray.forEach(function(index) {
         var marker = markersList[index];
         if (marker) {
           // delete from memory
@@ -234,7 +236,7 @@
 
       // clean up markers array
       deleteIndexList.reverse();
-      deleteIndexList.forEach(function (deleteIndex) {
+      deleteIndexList.forEach(function(deleteIndex) {
         markersList.splice(deleteIndex, 1);
       });
 
@@ -244,18 +246,19 @@
 
     // attach hover event handler
     function registerMarkerTipHandler(markerDiv) {
-      markerDiv.addEventListener('mouseover', function () {
+      markerDiv.addEventListener('mouseover', function() {
         var marker = markersMap[markerDiv.getAttribute('data-marker-key')];
         if (!!markerTip) {
           markerTip.querySelector('.vjs-tip-inner').innerText = setting.markerTip.text(marker);
           // margin-left needs to minus the padding length to align correctly with the marker
           markerTip.style.left = getPosition(marker) + '%';
-          markerTip.style.marginLeft = -parseFloat(markerTip.getBoundingClientRect().width / 2) + parseFloat(markerDiv.getBoundingClientRect().width / 4) + 'px';
+          markerTip.style.marginLeft = -parseFloat(markerTip.getBoundingClientRect().width / 2) + parseFloat(
+            markerDiv.getBoundingClientRect().width / 4) + 'px';
           markerTip.style.visibility = 'visible';
         }
       });
 
-      markerDiv.addEventListener('mouseout', function () {
+      markerDiv.addEventListener('mouseout', function() {
         if (!!markerTip) {
           markerTip.style.visibility = "hidden";
         }
@@ -305,7 +308,7 @@
         className: 'vjs-break-overlay',
         innerHTML: "<div class='vjs-break-overlay-text'></div>"
       });
-      Object.keys(setting.breakOverlay.style).forEach(function (key) {
+      Object.keys(setting.breakOverlay.style).forEach(function(key) {
         if (breakOverlay) {
           breakOverlay.style[key] = setting.breakOverlay.style[key];
         }
@@ -396,7 +399,7 @@
     }
 
     // setup the plugin after we loaded video's meta data
-    player.on("loadedmetadata", function () {
+    player.on("loadedmetadata", function() {
       initialize();
     });
 
@@ -463,6 +466,6 @@
     };
   }
 
-  _video2.default.plugin('markers', registerVideoJsMarkersPlugin);
+  _video2.default.registerPlugin('markers', registerVideoJsMarkersPlugin);
 });
 //# sourceMappingURL=videojs-markers.js.map
diff --git a/dist/videojs-markers.min.js b/dist/videojs-markers.min.js
index 886b39a..c2fc377 100644
--- a/dist/videojs-markers.min.js
+++ b/dist/videojs-markers.min.js
@@ -1,4 +1,104 @@
 /*! videojs-markers - v0.7.0 - 2017-06-06
-* Copyright (c) 2017 ; Licensed  */
+ * Copyright (c) 2017 ; Licensed  */
 
-!function(e,r){if("function"==typeof define&&define.amd)define(["video.js"],r);else if("undefined"!=typeof exports)r(require("video.js"));else{var t={exports:{}};r(e.videojs),e.videojsMarkers=t.exports}}(this,function(e){"use strict";function r(){var e=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(r){var t=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"==r?t:3&t|8).toString(16)})}function t(e){function t(){j.sort(function(e,r){return T.markerTip.time(e)-T.markerTip.time(r)})}function l(e){e.forEach(function(e){e.key=r(),M.el().querySelector(".vjs-progress-holder").appendChild(c(e)),g[e.key]=e,j.push(e)}),t()}function u(e){return T.markerTip.time(e)/M.duration()*100}function c(e){var r=i.default.createEl("div",{className:"vjs-marker "+(e.class||"")},{"data-marker-key":e.key,"data-marker-time":T.markerTip.time(e)});return Object.keys(T.markerStyle).forEach(function(e){r.style[e]=T.markerStyle[e]}),r.style.left=u(e)+"%",r.style.marginLeft=r.getBoundingClientRect().width/2+"px",r.addEventListener("click",function(r){var t=!1;if("function"==typeof T.onMarkerClick&&(t=!1===T.onMarkerClick(e)),!t){var i=this.getAttribute("data-marker-key");M.currentTime(T.markerTip.time(g[i]))}}),T.markerTip.display&&d(r),r}function f(){j.forEach(function(e){var r=M.el().querySelector(".vjs-marker[data-marker-key='"+e.key+"']"),t=T.markerTip.time(e);r.getAttribute("data-marker-time")!==t&&(r.style.left=u(e)+"%",r.setAttribute("data-marker-time",t))}),t()}function s(e){S&&(A=o,S.style.visibility="hidden"),E=o;var r=[];e.forEach(function(e){var t=j[e];if(t){delete g[t.key],r.push(e);var i=M.el().querySelector(".vjs-marker[data-marker-key='"+t.key+"']");i.parentNode.removeChild(i)}}),r.reverse(),r.forEach(function(e){j.splice(e,1)}),t()}function d(e){e.addEventListener("mouseover",function(){var r=g[e.getAttribute("data-marker-key")];O&&(O.querySelector(".vjs-tip-inner").innerText=T.markerTip.text(r),O.style.left=u(r)+"%",O.style.marginLeft=-parseFloat(O.getBoundingClientRect().width/2)+parseFloat(e.getBoundingClientRect().width/4)+"px",O.style.visibility="visible")}),e.addEventListener("mouseout",function(){O&&(O.style.visibility="hidden")})}function m(){O=i.default.createEl("div",{className:"vjs-tip",innerHTML:"<div class='vjs-tip-arrow'></div><div class='vjs-tip-inner'></div>"}),M.el().querySelector(".vjs-progress-holder").appendChild(O)}function v(){if(T.breakOverlay.display&&!(E<0)){var e=M.currentTime(),r=j[E],t=T.markerTip.time(r);e>=t&&e<=t+T.breakOverlay.displayTime?(A!==E&&(A=E,S&&(S.querySelector(".vjs-break-overlay-text").innerHTML=T.breakOverlay.text(r))),S&&(S.style.visibility="visible")):(A=o,S&&(S.style.visibility="hidden"))}}function y(){S=i.default.createEl("div",{className:"vjs-break-overlay",innerHTML:"<div class='vjs-break-overlay-text'></div>"}),Object.keys(T.breakOverlay.style).forEach(function(e){S&&(S.style[e]=T.breakOverlay.style[e])}),M.el().appendChild(S),A=o}function k(){p(),v(),e.onTimeUpdateAfterMarkerUpdate&&e.onTimeUpdateAfterMarkerUpdate()}function p(){if(j.length){var r=function(e){return e<j.length-1?T.markerTip.time(j[e+1]):M.duration()},t=M.currentTime(),i=o;if(E!==o){var n=r(E);if(t>=T.markerTip.time(j[E])&&t<n)return;if(E===j.length-1&&t===M.duration())return}if(t<T.markerTip.time(j[0]))i=o;else for(var a=0;a<j.length;a++)if(n=r(a),t>=T.markerTip.time(j[a])&&t<n){i=a;break}i!==E&&(i!==o&&e.onMarkerReached&&e.onMarkerReached(j[i],i),E=i)}}function x(){T.markerTip.display&&m(),M.markers.removeAll(),l(e.markers),T.breakOverlay.display&&y(),k(),M.on("timeupdate",k),M.off("loadedmetadata")}if(!i.default.mergeOptions){var h=function(e){return!!e&&"object"===(void 0===e?"undefined":n(e))&&"[object Object]"===toString.call(e)&&e.constructor===Object},b=function e(r,t){var i={};return[r,t].forEach(function(r){r&&Object.keys(r).forEach(function(t){var n=r[t];h(n)?(h(i[t])||(i[t]={}),i[t]=e(i[t],n)):i[t]=n})}),i};i.default.mergeOptions=b}i.default.createEl||(i.default.createEl=function(e,r,t){var n=i.default.Player.prototype.createEl(e,r);return t&&Object.keys(t).forEach(function(e){n.setAttribute(e,t[e])}),n});var T=i.default.mergeOptions(a,e),g={},j=[],E=o,M=this,O=null,S=null,A=o;M.on("loadedmetadata",function(){x()}),M.markers={getMarkers:function(){return j},next:function(){for(var e=M.currentTime(),r=0;r<j.length;r++){var t=T.markerTip.time(j[r]);if(t>e){M.currentTime(t);break}}},prev:function(){for(var e=M.currentTime(),r=j.length-1;r>=0;r--){var t=T.markerTip.time(j[r]);if(t+.5<e)return void M.currentTime(t)}},add:function(e){l(e)},remove:function(e){s(e)},removeAll:function(){for(var e=[],r=0;r<j.length;r++)e.push(r);s(e)},updateTime:function(){f()},reset:function(e){M.markers.removeAll(),l(e)},destroy:function(){M.markers.removeAll(),S&&S.remove(),O&&O.remove(),M.off("timeupdate",v),delete M.markers}}}var i=function(e){return e&&e.__esModule?e:{default:e}}(e),n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a={markerStyle:{width:"7px","border-radius":"30%","background-color":"red"},markerTip:{display:!0,text:function(e){return"Break: "+e.text},time:function(e){return e.time}},breakOverlay:{display:!1,displayTime:3,text:function(e){return"Break overlay: "+e.overlayText},style:{width:"100%",height:"20%","background-color":"rgba(0,0,0,0.7)",color:"white","font-size":"17px"}},onMarkerClick:function(e){},onMarkerReached:function(e,r){},markers:[]},o=-1;i.default.plugin("markers",t)});
\ No newline at end of file
+! function(e, r) { if ("function" == typeof define && define.amd) define(["video.js"], r);
+  else if ("undefined" != typeof exports) r(require("video.js"));
+  else { var t = { exports: {} };
+    r(e.videojs), e.videojsMarkers = t.exports } }(this, function(e) { "use strict";
+
+  function r() { var e = (new Date).getTime(); return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,
+      function(r) { var t = (e + 16 * Math.random()) % 16 | 0; return e = Math.floor(e / 16), ("x" == r ? t : 3 & t |
+          8).toString(16) }) }
+
+  function t(e) {
+    function t() { j.sort(function(e, r) { return T.markerTip.time(e) - T.markerTip.time(r) }) }
+
+    function l(e) { e.forEach(function(e) { e.key = r(), M.el().querySelector(".vjs-progress-holder").appendChild(c(e)),
+          g[e.key] = e, j.push(e) }), t() }
+
+    function u(e) { return T.markerTip.time(e) / M.duration() * 100 }
+
+    function c(e) { var r = i.default.createEl("div", { className: "vjs-marker " + (e.class || "") }, { "data-marker-key": e
+          .key, "data-marker-time": T.markerTip.time(e) }); return Object.keys(T.markerStyle).forEach(function(e) { r
+            .style[e] = T.markerStyle[e] }), r.style.left = u(e) + "%", r.style.marginLeft = r.getBoundingClientRect()
+        .width / 2 + "px", r.addEventListener("click", function(r) { var t = !1; if ("function" == typeof T.onMarkerClick &&
+            (t = !1 === T.onMarkerClick(e)), !t) { var i = this.getAttribute("data-marker-key");
+            M.currentTime(T.markerTip.time(g[i])) } }), T.markerTip.display && d(r), r }
+
+    function f() { j.forEach(function(e) { var r = M.el().querySelector(".vjs-marker[data-marker-key='" + e.key +
+            "']"),
+          t = T.markerTip.time(e);
+        r.getAttribute("data-marker-time") !== t && (r.style.left = u(e) + "%", r.setAttribute("data-marker-time",
+          t)) }), t() }
+
+    function s(e) { S && (A = o, S.style.visibility = "hidden"), E = o; var r = [];
+      e.forEach(function(e) { var t = j[e]; if (t) { delete g[t.key], r.push(e); var i = M.el().querySelector(
+            ".vjs-marker[data-marker-key='" + t.key + "']");
+          i.parentNode.removeChild(i) } }), r.reverse(), r.forEach(function(e) { j.splice(e, 1) }), t() }
+
+    function d(e) { e.addEventListener("mouseover", function() { var r = g[e.getAttribute("data-marker-key")];
+        O && (O.querySelector(".vjs-tip-inner").innerText = T.markerTip.text(r), O.style.left = u(r) + "%", O.style
+          .marginLeft = -parseFloat(O.getBoundingClientRect().width / 2) + parseFloat(e.getBoundingClientRect()
+            .width / 4) + "px", O.style.visibility = "visible") }), e.addEventListener("mouseout", function() { O &&
+          (O.style.visibility = "hidden") }) }
+
+    function m() { O = i.default.createEl("div", { className: "vjs-tip", innerHTML: "<div class='vjs-tip-arrow'></div><div class='vjs-tip-inner'></div>" }),
+        M.el().querySelector(".vjs-progress-holder").appendChild(O) }
+
+    function v() { if (T.breakOverlay.display && !(E < 0)) { var e = M.currentTime(),
+          r = j[E],
+          t = T.markerTip.time(r);
+        e >= t && e <= t + T.breakOverlay.displayTime ? (A !== E && (A = E, S && (S.querySelector(
+            ".vjs-break-overlay-text").innerHTML = T.breakOverlay.text(r))), S && (S.style.visibility = "visible")) :
+          (A = o, S && (S.style.visibility = "hidden")) } }
+
+    function y() { S = i.default.createEl("div", { className: "vjs-break-overlay", innerHTML: "<div class='vjs-break-overlay-text'></div>" }),
+        Object.keys(T.breakOverlay.style).forEach(function(e) { S && (S.style[e] = T.breakOverlay.style[e]) }), M.el()
+        .appendChild(S), A = o }
+
+    function k() { p(), v(), e.onTimeUpdateAfterMarkerUpdate && e.onTimeUpdateAfterMarkerUpdate() }
+
+    function p() { if (j.length) { var r = function(e) { return e < j.length - 1 ? T.markerTip.time(j[e + 1]) : M.duration() },
+          t = M.currentTime(),
+          i = o; if (E !== o) { var n = r(E); if (t >= T.markerTip.time(j[E]) && t < n) return; if (E === j.length -
+            1 && t === M.duration()) return } if (t < T.markerTip.time(j[0])) i = o;
+        else
+          for (var a = 0; a < j.length; a++)
+            if (n = r(a), t >= T.markerTip.time(j[a]) && t < n) { i = a; break }
+        i !== E && (i !== o && e.onMarkerReached && e.onMarkerReached(j[i], i), E = i) } }
+
+    function x() { T.markerTip.display && m(), M.markers.removeAll(), l(e.markers), T.breakOverlay.display && y(), k(),
+        M.on("timeupdate", k), M.off("loadedmetadata") } if (!i.default.mergeOptions) { var h = function(e) { return !
+            !e && "object" === (void 0 === e ? "undefined" : n(e)) && "[object Object]" === toString.call(e) && e.constructor ===
+            Object },
+        b = function e(r, t) { var i = {}; return [r, t].forEach(function(r) { r && Object.keys(r).forEach(function(t) { var
+                n = r[t];
+              h(n) ? (h(i[t]) || (i[t] = {}), i[t] = e(i[t], n)) : i[t] = n }) }), i };
+      i.default.mergeOptions = b } i.default.createEl || (i.default.createEl = function(e, r, t) { var n = i.default.Player
+        .prototype.createEl(e, r); return t && Object.keys(t).forEach(function(e) { n.setAttribute(e, t[e]) }), n }); var
+      T = i.default.mergeOptions(a, e),
+      g = {},
+      j = [],
+      E = o,
+      M = this,
+      O = null,
+      S = null,
+      A = o;
+    M.on("loadedmetadata", function() { x() }), M.markers = { getMarkers: function() { return j }, next: function() { for (
+          var e = M.currentTime(), r = 0; r < j.length; r++) { var t = T.markerTip.time(j[r]); if (t > e) { M.currentTime(
+              t); break } } }, prev: function() { for (var e = M.currentTime(), r = j.length - 1; r >= 0; r--) { var
+            t = T.markerTip.time(j[r]); if (t + .5 < e) return void M.currentTime(t) } }, add: function(e) { l(e) },
+      remove: function(e) { s(e) }, removeAll: function() { for (var e = [], r = 0; r < j.length; r++) e.push(r);
+        s(e) }, updateTime: function() { f() }, reset: function(e) { M.markers.removeAll(), l(e) }, destroy: function() { M
+          .markers.removeAll(), S && S.remove(), O && O.remove(), M.off("timeupdate", v), delete M.markers } } } var i =
+    function(e) { return e && e.__esModule ? e : { default: e } }(e),
+    n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) { return typeof e } :
+    function(e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ?
+        "symbol" : typeof e },
+    a = { markerStyle: { width: "7px", "border-radius": "30%", "background-color": "red" }, markerTip: { display: !0,
+        text: function(e) { return "Break: " + e.text }, time: function(e) { return e.time } }, breakOverlay: { display:
+          !1, displayTime: 3, text: function(e) { return "Break overlay: " + e.overlayText }, style: { width: "100%",
+          height: "20%", "background-color": "rgba(0,0,0,0.7)", color: "white", "font-size": "17px" } },
+      onMarkerClick: function(e) {}, onMarkerReached: function(e, r) {}, markers: [] },
+    o = -1;
+  i.default.registerPlugin("markers", t) });
diff --git a/src/videojs.markers.js b/src/videojs.markers.js
index 46f7329..ec037cf 100755
--- a/src/videojs.markers.js
+++ b/src/videojs.markers.js
@@ -9,9 +9,9 @@ import videojs from 'video.js';
 
 type Marker = {
   time: number,
-  text?: string,
-  class?: string,
-  overlayText?: string,
+  text ? : string,
+  class ? : string,
+  overlayText ? : string,
   // private property
   key: string,
 };
@@ -19,7 +19,7 @@ type Marker = {
 // default setting
 const defaultSetting = {
   markerStyle: {
-    'width':'7px',
+    'width': '7px',
     'border-radius': '30%',
     'background-color': 'red',
   },
@@ -32,14 +32,14 @@ const defaultSetting = {
       return marker.time;
     },
   },
-  breakOverlay:{
+  breakOverlay: {
     display: false,
     displayTime: 3,
     text: function(marker) {
       return "Break overlay: " + marker.overlayText;
     },
     style: {
-      'width':'100%',
+      'width': '100%',
       'height': '20%',
       'background-color': 'rgba(0,0,0,0.7)',
       'color': 'white',
@@ -55,9 +55,9 @@ const defaultSetting = {
 function generateUUID(): string {
   var d = new Date().getTime();
   var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
-    var r = (d + Math.random()*16)%16 | 0;
-    d = Math.floor(d/16);
-    return (c=='x' ? r : (r&0x3|0x8)).toString(16);
+    var r = (d + Math.random() * 16) % 16 | 0;
+    d = Math.floor(d / 16);
+    return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);
   });
   return uuid;
 };
@@ -73,6 +73,7 @@ function registerVideoJsMarkersPlugin(options) {
         toString.call(value) === '[object Object]' &&
         value.constructor === Object;
     }
+
     function mergeOptions(source1: Object, source2: Object) {
 
       const result = {};
@@ -99,7 +100,7 @@ function registerVideoJsMarkersPlugin(options) {
   }
 
   if (!videojs.createEl) {
-    videojs.createEl = function(tagName: string, props: Object, attrs?: Object): void {
+    videojs.createEl = function(tagName: string, props: Object, attrs ? : Object): void {
       const el = videojs.Player.prototype.createEl(tagName, props);
       if (!!attrs) {
         Object.keys(attrs).forEach(key => {
@@ -109,19 +110,19 @@ function registerVideoJsMarkersPlugin(options) {
       return el;
     }
   }
-  
 
   /**
    * register the markers plugin (dependent on jquery)
    */
   let setting = videojs.mergeOptions(defaultSetting, options),
-      markersMap: {[key:string]: Marker} = {},
-      markersList: Array<Marker>  = [], // list of markers sorted by time
-      currentMarkerIndex  = NULL_INDEX,
-      player       = this,
-      markerTip    = null,
-      breakOverlay = null,
-      overlayIndex = NULL_INDEX;
+    markersMap: {
+      [key: string]: Marker } = {},
+    markersList: Array < Marker > = [], // list of markers sorted by time
+    currentMarkerIndex = NULL_INDEX,
+    player = this,
+    markerTip = null,
+    breakOverlay = null,
+    overlayIndex = NULL_INDEX;
 
   function sortMarkersList(): void {
     // sort the list by time in asc order
@@ -130,7 +131,7 @@ function registerVideoJsMarkersPlugin(options) {
     });
   }
 
-  function addMarkers(newMarkers: Array<Marker>): void {
+  function addMarkers(newMarkers: Array < Marker > ): void {
     newMarkers.forEach((marker: Marker) => {
       marker.key = generateUUID();
 
@@ -161,7 +162,7 @@ function registerVideoJsMarkersPlugin(options) {
       markerDiv.style[key] = setting.markerStyle[key];
     });
     markerDiv.style.left = getPosition(marker) + '%';
-    markerDiv.style.marginLeft = markerDiv.getBoundingClientRect().width/2 + 'px';
+    markerDiv.style.marginLeft = markerDiv.getBoundingClientRect().width / 2 + 'px';
 
     // bind click event to seek to marker time
     markerDiv.addEventListener('click', function(e) {
@@ -187,7 +188,7 @@ function registerVideoJsMarkersPlugin(options) {
   function updateMarkers(): void {
     // update UI for markers whose time changed
     markersList.forEach((marker: Marker) => {
-      var markerDiv = player.el().querySelector(".vjs-marker[data-marker-key='" + marker.key +"']");
+      var markerDiv = player.el().querySelector(".vjs-marker[data-marker-key='" + marker.key + "']");
       var markerTime = setting.markerTip.time(marker);
 
       if (markerDiv.getAttribute('data-marker-time') !== markerTime) {
@@ -198,15 +199,15 @@ function registerVideoJsMarkersPlugin(options) {
     sortMarkersList();
   }
 
-  function removeMarkers(indexArray: Array<number>): void {
+  function removeMarkers(indexArray: Array < number > ): void {
     // reset overlay
-    if (!!breakOverlay){
+    if (!!breakOverlay) {
       overlayIndex = NULL_INDEX;
       breakOverlay.style.visibility = "hidden";
     }
     currentMarkerIndex = NULL_INDEX;
 
-    let deleteIndexList: Array<number> = [];
+    let deleteIndexList: Array < number > = [];
     indexArray.forEach((index: number) => {
       let marker = markersList[index];
       if (marker) {
@@ -215,7 +216,7 @@ function registerVideoJsMarkersPlugin(options) {
         deleteIndexList.push(index);
 
         // delete from dom
-        let el = player.el().querySelector(".vjs-marker[data-marker-key='" + marker.key +"']");
+        let el = player.el().querySelector(".vjs-marker[data-marker-key='" + marker.key + "']");
         el.parentNode.removeChild(el);
       }
     });
@@ -238,13 +239,13 @@ function registerVideoJsMarkersPlugin(options) {
         markerTip.querySelector('.vjs-tip-inner').innerText = setting.markerTip.text(marker);
         // margin-left needs to minus the padding length to align correctly with the marker
         markerTip.style.left = getPosition(marker) + '%';
-        markerTip.style.marginLeft = 
-          -parseFloat(markerTip.getBoundingClientRect().width / 2) + parseFloat(markerDiv.getBoundingClientRect().width / 4) + 'px';
+        markerTip.style.marginLeft = -parseFloat(markerTip.getBoundingClientRect().width / 2) + parseFloat(
+          markerDiv.getBoundingClientRect().width / 4) + 'px';
         markerTip.style.visibility = 'visible';
       }
     });
 
-    markerDiv.addEventListener('mouseout',() => {
+    markerDiv.addEventListener('mouseout', () => {
       if (!!markerTip) {
         markerTip.style.visibility = "hidden";
       }
@@ -335,7 +336,7 @@ function registerVideoJsMarkersPlugin(options) {
     if (currentMarkerIndex !== NULL_INDEX) {
       // check if staying at same marker
       var nextMarkerTime = getNextMarkerTime(currentMarkerIndex);
-      if(
+      if (
         currentTime >= setting.markerTip.time(markersList[currentMarkerIndex]) &&
         currentTime < nextMarkerTime
       ) {
@@ -403,10 +404,10 @@ function registerVideoJsMarkersPlugin(options) {
 
   // exposed plugin API
   player.markers = {
-    getMarkers: function(): Array<Marker> {
+    getMarkers: function(): Array < Marker > {
       return markersList;
     },
-    next : function(): void {
+    next: function(): void {
       // go to the next marker from current timestamp
       const currentTime = player.currentTime();
       for (var i = 0; i < markersList.length; i++) {
@@ -417,10 +418,10 @@ function registerVideoJsMarkersPlugin(options) {
         }
       }
     },
-    prev : function(): void {
+    prev: function(): void {
       // go to previous marker
       const currentTime = player.currentTime();
-      for (var i = markersList.length - 1; i >= 0 ; i--) {
+      for (var i = markersList.length - 1; i >= 0; i--) {
         var markerTime = setting.markerTip.time(markersList[i]);
         // add a threshold
         if (markerTime + 0.5 < currentTime) {
@@ -429,11 +430,11 @@ function registerVideoJsMarkersPlugin(options) {
         }
       }
     },
-    add : function(newMarkers: Array<Marker>): void {
+    add: function(newMarkers: Array < Marker > ): void {
       // add new markers given an array of index
       addMarkers(newMarkers);
     },
-    remove: function(indexArray: Array<number>): void {
+    remove: function(indexArray: Array < number > ): void {
       // remove markers given an array of index
       removeMarkers(indexArray);
     },
@@ -448,7 +449,7 @@ function registerVideoJsMarkersPlugin(options) {
       // notify the plugin to update the UI for changes in marker times
       updateMarkers();
     },
-    reset: function(newMarkers: Array<Marker>): void {
+    reset: function(newMarkers: Array < Marker > ): void {
       // remove all the existing markers and add new ones
       player.markers.removeAll();
       addMarkers(newMarkers);
@@ -464,4 +465,4 @@ function registerVideoJsMarkersPlugin(options) {
   };
 }
 
-videojs.plugin('markers', registerVideoJsMarkersPlugin);
+videojs.registerPlugin('markers', registerVideoJsMarkersPlugin);
